

what to monitor ??

when p50/95/99 value becomes ??

when http response success rate drops below 99% ??

when cache hit rate drops below 80% ??

when db latency p99 goes above 100ms ??

when db errors rate goes above 0.1% ??

when database connections are too many ?

when a migration is not applied successfully

when cache hit rate drops below 80%



container absent
site high memory usage => use a gauge
site netwrk traffic => gauge, histogram
site error rates => counter
site latency => histogram
site response rate => histogram
site down => gauge, histogram



database :
database access within last week
database mods within last week
errors
cache hit ratio



admin
total of accesses
total of mods (applied and non applied)
can see who accessed ?
db latency p50 to p99.9







explanation for latency :

Latency percentiles, such as p50, p95, and p99, are statistical measures used to understand the distribution of response times in a system. Here's a breakdown of what each percentile represents:

p50 (50th percentile): This is the median latency. It means that 50% of the requests are served faster than this value, and 50% are slower. It's a good indicator of the typical experience for most users.
p95 (95th percentile): This value indicates that 95% of the requests are served faster than this value, and only 5% are slower. It helps identify the experience of the majority of users, excluding the slowest 5%.
p99 (99th percentile): This value shows that 99% of the requests are served faster than this value, and only 1% are slower. It highlights the experience of almost all users, including those experiencing the worst performance.
When to Send an Alert
Alerts should be configured based on the specific needs and performance expectations of your system. Here are some general guidelines:

p50 (Median Latency): If the median latency exceeds a certain threshold, it indicates that the typical user experience is degrading. An alert might be sent if this value goes beyond an acceptable limit for your application.
p95 (95th Percentile Latency): If the p95 latency exceeds a threshold, it suggests that a significant portion of users (5%) are experiencing slower response times. This could be a sign of performance issues that need to be addressed.
p99 (99th Percentile Latency): If the p99 latency exceeds a threshold, it indicates that the worst-performing requests are taking too long. This is critical for ensuring that even the slowest requests are within acceptable limits.

Example Alert Conditions
p50 Latency Alert: Send an alert if the p50 latency exceeds 200ms.
p95 Latency Alert: Send an alert if the p95 latency exceeds 500ms.
p99 Latency Alert: Send an alert if the p99 latency exceeds 1000ms.
These thresholds should be adjusted based on the specific performance requirements and user expectations of your application. Monitoring these percentiles helps ensure that your system is performing well for the majority of users and that any performance degradation is quickly identified and addressed.







CPU Utilisation:
avg(rate(node_cpu{job="default/node-exporter",mode="idle"}[1m]))


CPU Saturation:
sum(node_load1{job="default/node-exporter"})/sum(node:node_num_cpu:sum)


Memory Utilisation:
sum(node_memory_MemFree{job=“…”} +node_memory_Cached{job=“…”} +node_memory_Buffers{job=“…”})/ sum(node_memory_MemTotal{job=“…”})



Memory Saturation:
1e3 * sum(rate(node_vmstat_pgpgin{job=“…”}[1m]) +rate(node_vmstat_pgpgout{job=“…”}[1m])))


Rate:
sum(rate(request_duration_seconds_count{job=“…”}[1m]))


Errors:
sum(rate(request_duration_seconds_count{job=“…”,status_code!~”2..”}[1m]))


Duration:
histogram_quantile(0.99,sum(rate(request_duration_seconds_bucket{job=“…}[1m])) by (le))




LTES:

latency 
p50, p95, p99, p999
	-> top views by response time ?
topk(5, (1 - (sum(max_over_time(django_http_requests_latency_seconds_by_view_method_bucket{app=~\"^$application$\",le=\"$threshold\"}[$__range]) / ignoring(le) max_over_time(django_http_requests_latency_seconds_by_view_method_count{app=~\"^$application$\"}[$__range])) by (method, view) / count(present_over_time(django_http_requests_latency_seconds_by_view_method_count{app=~\"^$application$\"}[$__range])) by (method, view))) > 0.0099)






traffic
http request per second (for each page)
also : static vs dynamic ?
	-> top responses by view (by type?)

for each request type : how many + rate out of total



errors
http exceptions, alos 4xx and 5xx rates
	-> success rate (non 4xx or 5xx responses)
	-> top exceptions (by view? by type?)


saturation
look at latency p99 on shart intervals (like a minute, to detect spikes)
also look at cache hit ratio and cache miss ratio (cache hit ratio should be over 80%)
	-> cache hit ratio




