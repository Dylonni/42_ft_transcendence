dockerfile for elasticsearch

ARG ELK_STACK_VERSION
ARG ELASTIC_PASSWORD

FROM docker.elastic.co/elasticsearch/elasticsearch:${ELK_STACK_VERSION}

RUN mkdir -p /usr/share/elasticsearch/config/cert
RUN ./bin/elasticsearch-certutil ca --out /usr/share/elasticsearch/config/cert/elastic-stack-ca.p12 --pass "${ELASTIC_PASSWORD}" --silent
RUN ./bin/elasticsearch-certutil cert --ca /usr/share/elasticsearch/config/cert/elastic-stack-ca.p12 --ca-pass "${ELASTIC_PASSWORD}" --out /usr/share/elasticsearch/config/elastic-certificates.p12 --pass "${ELASTIC_PASSWORD}" --silent

# RUN ./bin/elasticsearch-keystore create
# RUN echo "${ELASTIC_PASSWORD}" | ./bin/elasticsearch-keystore add --stdin xpack.security.transport.ssl.keystore.secure_password
# RUN echo "${ELASTIC_PASSWORD}" | ./bin/elasticsearch-keystore add --stdin xpack.security.transport.ssl.truststore.secure_password


# https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
# https://www.elastic.co/guide/en/elasticsearch/reference/current/configuring-stack-security.html
# https://www.elastic.co/guide/en/elasticsearch/reference/current/security-basic-setup.html
# https://www.elastic.co/guide/en/elasticsearch/reference/current/security-basic-setup-https.html
# ./bin/elasticsearch-certutil http

# When asked if you want to generate a CSR, enter n.
# When asked if you want to use an existing CA, enter y.
# Enter the path to your CA. This is the absolute path to the elastic-stack-ca.p12 file that you generated for your cluster.
# Enter the password for your CA.
# Enter an expiration value for your certificate. You can enter the validity period in years, months, or days. For example, enter 90D for 90 days.
# When asked if you want to generate one certificate per node, enter y.

# Each certificate will have its own private key, and will be issued for a specific hostname or IP address.

# When prompted, enter the name of the first node in your cluster. Use the same node name that you used when generating node certificates.
# Enter all hostnames used to connect to your first node. These hostnames will be added as DNS names in the Subject Alternative Name (SAN) field in your certificate.

# List every hostname and variant used to connect to your cluster over HTTPS.

# Enter the IP addresses that clients can use to connect to your node.
# Repeat these steps for each additional node in your cluster.
# After generating a certificate for each of your nodes, enter a password for your private key when prompted.
# Unzip the generated elasticsearch-ssl-http.zip file. This compressed file contains one directory for both Elasticsearch and Kibana.

# /elasticsearch
# |_ README.txt
# |_ http.p12
# |_ sample-elasticsearch.yml 
# /kibana
# |_ README.txt
# |_ elasticsearch-ca.pem
# |_ sample-kibana.yml
# On every node in your cluster, complete the following steps:

# Copy the relevant http.p12 certificate to the $ES_PATH_CONF directory.
# Edit the elasticsearch.yml file to enable HTTPS security and specify the location of the http.p12 security certificate.

# xpack.security.http.ssl.enabled: true
# xpack.security.http.ssl.keystore.path: http.p12
# Add the password for your private key to the secure settings in Elasticsearch.

# ./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
# Start Elasticsearch.


COPY ./config/elasticsearch.yml /usr/share/elasticsearch/config/elasticsearch.yml







