networks:
  backend:
    name: backend

services:
# CYBERSECURITY
  nginx-modsec:
    build: ./cybersec/nginx-modsec
    container_name: nginx-modsec
    env_file: .env
    depends_on:
      - vault
      - django
      - postgres-exporter
      - prometheus
      - grafana
      - alert-manager
      - loki
    restart: always
    networks:
      - backend
    ports:
      - "8080:8080" # HTTP -> Django
      - "8443:8443" # HTTPS
      - "8200:8200" # Vault - only exposed if trying to access GUI
      - "3000:3000" # Grafana
      - "3100:3100" # Loki
      - "9090:9090" # Prometheus - no need to expose
      - "9187:9187" # Postgres Exporter - no need to expose
    volumes:
      - shared-certs:/etc/nginx/ssl

# nginx used ports:
      # - "8080:8080" # HTTP -> Django
      # - "8443:8443" # HTTPS
      # - "8200:8200" # Vault - only exposed if trying to access GUI
      # - "3000:3000" # Grafana
      # - "9093:9093" # Alert Manager - no need to expose
      # - "3100:3100" # Loki
      # - "9090:9090" # Prometheus - no need to expose
      # - "9187:9187" # Postgres Exporter - no need to expose
      # - "6379:6379" # Redis - no need to expose


  vault:
    build: ./cybersec/vault
    container_name: vault
    env_file: .env
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD-SHELL", "vault status | grep 'Sealed.*false' && test -f /vault/output/initialized"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    volumes:
      - django-token:/vault/secrets/django
      - shared-certs:/etc/ssl/shared


# WEB
  django:
    build: ./web/django
    container_name: django
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      # test: ["CMD-SHELL", "ping -c 1 localhost || exit 1"]
      test: ["CMD", "curl", "-f", "localhost:8000"]
      interval: 5s
      timeout: 5s
      retries: 4
    networks:
      - backend
    volumes:
      - ./web/django:/django
      - django-token:/django/secrets:ro

  redis:
    image: redis:7.4.0-alpine3.20
    container_name: redis
    # env_file: .env
    networks:
      - backend

  postgres:
    build: ./web/postgres
    container_name: postgres
    env_file: .env # NEEDED
    depends_on:
      vault:
        condition: service_healthy
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 4
    networks:
      - backend
    volumes:
      - pg-data:/var/lib/postgresql/data


# MONITORING
  postgres-exporter:
    build: ./devops/mon/postgres-exporter
    container_name: postgres-exporter
    env_file: .env # NEEDED
    networks:
      - backend
    volumes:
      - ./postgres_exporter.yml:/etc/postgres_exporter.yml
    command:
      - '--config.file=/etc/postgres_exporter.yml'

  prometheus:
    build: ./devops/mon/prometheus
    container_name: prometheus
    depends_on:
      django:
        condition: service_healthy
    networks:
      - backend

  grafana:
    build: ./devops/mon/grafana
    container_name: grafana
    env_file: .env
    depends_on:
      - vault
      - prometheus
    networks:
      - backend
    volumes:
      - shared-certs:/etc/ssl/shared:ro

  alert-manager:
    build: ./devops/mon/alert-manager
    container_name: alert-manager
    depends_on:
      - prometheus
    networks:
      - backend
    command: --config.file=/etc/alertmanager/alertmanager.yml --log.level=debug --web.listen-address=:9093 --cluster.listen-address=

  loki:
    build: ./devops/mon/loki
    container_name: loki
    depends_on:
      django:
        condition: service_healthy
    networks:
      - backend

volumes:
  pg-data:
    name: pg-data
  django-token:
    name: django-token
  shared-certs:
    name: shared-certs



